@page "/intersectionobserverdemo"

@using Blazor.Essentials.IntersectionObserverAPI;
@using Microsoft.Extensions.Logging;

@inject ILogger<IntersectionObserverDemo> Logger;
@inject IIntersectionObserverFactory ObserverFactory;


<style>
    .theBox {
        border: 4px solid rgb(20, 20, 120);
        transition: background-color 1s, border 1s;
        width: 350px;
        height: 350px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .vertical {
        color: white;
        font: 32px "Arial";
    }

    .paddingCard {
        height: 100vh;
    }

</style>

<h1>Intersection Observer - Demo</h1>

<div class="card">
    <div class="card-body paddingCard">
        Scroll this page up and down and notice how the appearance of the box (below the folder) changes as you do so.
    </div>    
</div>

<div class="card" @ref=observerReference>
    <div class="card-body theBox" style="background-color:rgba(@red, 40, @blue, @currentRatio)">
        <div class="vertical">
            Welcome to <strong>The Box!</strong>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body paddingCard">
        This space intentionally left blank.
    </div>    
</div>

@code {
        private const int numSteps = 20;

        private decimal prevRatio = 0.0M;

        private int red = 40;

        private int blue = 190;

        private decimal currentRatio = 255M;

        private ElementReference observerReference;

        private IIntersectionObserver observer;

        protected override void OnAfterRender(bool firstRender)
        {
            base.OnAfterRender(firstRender);

            if (!firstRender || observer != null)
            {
                return;
            }

            AttachObserver();
        }

        private void AttachObserver()
        {
            var options = new IntersectionObserverOptions
            {
                Root = null,
                RootMargin = "0px",
                Threshold = BuildThresholdList()
            };

            observer = ObserverFactory.CreateObserver(this.OnIntersectUpdated, options);

            observer.Observe(observerReference);
        }

        private void OnIntersectUpdated(IList<IntersectionObserverEntry> entries, IIntersectionObserver sourceObserver)
        {
            foreach (var entry in entries)
            {
                red = entry.IntersectionRatio > prevRatio 
                    ? 40 
                    : 190;

                blue = entry.IntersectionRatio > prevRatio
                    ? 190 
                    : 40;

                currentRatio = entry.IntersectionRatio;

                prevRatio = entry.IntersectionRatio;
            }

            StateHasChanged();
        }

        private static List<decimal> BuildThresholdList()
        {
            var thresholds = new List<decimal>();
            for (int i = 0; i <= numSteps; i++)
            {
                var ratio = i / (decimal)numSteps;
                thresholds.Add(ratio);
            }

            thresholds.Add(0);
            return thresholds;
        }
}